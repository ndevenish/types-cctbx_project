from typing import Generic, Tuple, TypeVar, overload, type_check_only

import scitbx.stl.set
import scitbx.stl.vector

T = TypeVar("T")
VT = TypeVar("VT")

@type_check_only
class FlexShared(Generic[VT]):
    @overload
    def __init__(self: T, other: T) -> None: ...
    @overload
    def __init__(self, size: int, value: VT) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def size(self) -> int: ...
    def __len__(self) -> int: ...
    @overload
    def __getitem__(self, index: int) -> T: ...
    @overload
    def __getitem__(self: T, index: slice) -> T: ...
    def __setitem__(self, index: int, value: VT) -> None: ...
    @overload
    def __delitem__(self, index: int) -> None: ...
    @overload
    def __delitem__(self, index: slice) -> None: ...
    def deep_copy(self: T) -> T: ...
    def clear(self) -> None: ...
    def insert(self, index: int, value: VT) -> None: ...
    def append(self, value: VT) -> None: ...
    def extend(self: T, other: T) -> None: ...
    def reserve(self, size: int) -> None: ...

class pickle_import_trigger: ...
class tiny_int_2(FlexShared[Tuple[int, int]]): ...
class tiny_int_3(FlexShared[Tuple[int, int, int]]): ...
class tiny_int_4(FlexShared[Tuple[int, int, int, int]]): ...
class mat3_int(FlexShared[Tuple[int, int, int, int, int, int, int, int]]): ...
class stl_vector_unsigned(FlexShared[scitbx.stl.vector.unsigned]): ...
class stl_vector_double(FlexShared[scitbx.stl.vector.double]): ...
class stl_set_unsigned(FlexShared[scitbx.stl.set.unsigned]): ...
