from __future__ import annotations

from typing import Any, Dict, Optional

from libtbx.phil import scope_extract
from scitbx.array_family import flex

from .detectorbase import DetectorImageBase, tile_manager_base

class NpyImage(DetectorImageBase):
    vendortype: str
    source_data: Any
    parameters: Any
    linearintdata: Any
    def __init__(self, filename: str, source_data: Any | None = ...) -> None: ...
    def get_tile_manager(self, phil: scope_extract) -> tile_manager: ...
    def read(self) -> None: ...
    def readHeader(self, horizons_phil: scope_extract) -> None: ...
    def translate_tiles(self, phil: scope_extract) -> None: ...
    def correct_gain_in_place(self, filename, adu_scale, phil) -> None: ...
    def correct_background_in_place(self, phil) -> None: ...
    def correct_background_by_block(self, asic): ...
    def debug_write(self, fileout, mod_data: Any | None = ...) -> None: ...
    def getEndian(self): ...

def image_dict_to_unicode(data: dict) -> dict:
    """Copy a dict, running .decode() on any bytes keys or values"""

class tile_manager(tile_manager_base):
    def effective_translations(self) -> None: ...
    beam: Any
    def effective_tiling_as_flex_int_impl(self, **kwargs) -> flex.int: ...
