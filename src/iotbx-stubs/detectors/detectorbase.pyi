from __future__ import annotations

from typing import Any, Optional, Tuple

from libtbx.phil import scope_extract
from scitbx.array_family import flex

class DetectorImageBase:
    filename: Any
    parameters: Any
    linearintdata: Any
    bin: int
    vendortype: str
    beam_center_reference_frame: str
    beam_center_convention: Any
    vendor_specific_null_value: int
    header: Any
    headerlines: Any
    image_size_fast: Any
    image_size_slow: Any
    pixel_resolution: Any
    data_types: Any
    def __init__(self, filename: str) -> None: ...
    def bin_safe_set_data(self, new_data_array: flex.int) -> None: ...
    def copy_common_attributes_from_parent_instance(self, parentobject) -> None: ...
    def debug_write(self, fileout, mod_data: Any | None = ...) -> None: ...
    def detector_coords_as_image_coords_float(self, x, y): ...
    def detector_coords_as_image_coords(self, x, y): ...
    def endian_swap_required(self): ...
    def fileLength(self): ...
    def get_beam_center_mm(self): ...
    def get_beam_center_pixels_fast_slow(self): ...
    def get_data_type(self): ...
    def get_flex_image(
        self, binning: int = ..., brightness: float = ..., color_scheme: int = ...
    ) -> Any: ...
    def get_pixel_intensity(self, coords): ...
    def get_raw_data(self) -> flex.int: ...
    def get_spotfinder(self, distl_params): ...
    def get_tile_manager(self, phil): ...
    def getEndian(self) -> None: ...
    def image_coords_as_detector_coords(self, x, y, readout: Any | None = ...): ...
    def initialize_viewer_properties(
        self, phil_parameters, verbose: bool = ...
    ) -> None: ...
    def read(self) -> None: ...
    def set_beam_center_convention(self, beam_center_convention) -> None: ...
    def setBin(self, bin) -> None: ...
    def show_header(self, out: Any | None = ...) -> None: ...

class tile_manager_base:
    working_params: Any
    beam: Any
    size1: Any
    size2: Any
    reference_image: Any
    def __init__(
        self,
        working_params: scope_extract,
        beam: tuple[int, int] | None = ...,
        size1: int | None = ...,
        size2: int | None = ...,
        reference_image: Any | None = ...,
    ) -> None: ...
    def effective_tiling_as_flex_int(
        self,
        reapply_peripheral_margin: bool = ...,
        reference_image: Any | None = ...,
        encode_inactive_as_zeroes: bool = ...,
        **kwargs
    ): ...
    def effective_tiling_as_flex_int_impl(self, **kwargs): ...
