from __future__ import annotations

from typing import Any, Optional, Tuple, Union

from scitbx.matrix import col, rec, sqr

def align_reference_frame(
    primary_axis: rec | tuple[float, float, float] | col,
    primary_target: tuple[int, int, int] | tuple[float, float, float] | col,
    secondary_axis: rec | tuple[float, float, float] | col,
    secondary_target: tuple[int, int, int] | tuple[float, float, float] | col,
) -> sqr: ...
def import_xds_xparm(xparm_file: str) -> coordinate_frame_information: ...
def is_recognized_file(filename: str) -> bool: ...
def is_xds_ascii_hkl(putative_xds_ascii_hkl_file: str) -> bool: ...
def is_xds_inp(putative_xds_inp_file: str) -> bool: ...
def is_xds_integrate_hkl(putative_integrate_hkl_file: str) -> bool: ...
def is_xds_xparm(putative_xds_xparm_file: str) -> bool: ...
def orthogonal_component(reference: rec, changing: rec) -> rec: ...
def import_xds_integrate_hkl(integrate_hkl_file): ...
def import_xds_ascii_hkl(xds_ascii_hkl_file): ...
def import_xds_inp(xds_inp_file): ...
def test_align_reference_frame() -> None: ...
def test_align_reference_frame_dw() -> None: ...
def random_orthogonal_vectors(): ...
def test_align_reference_frame_brute() -> None: ...
def find_closest_matrix(moving, target): ...
def work() -> None: ...

class coordinate_frame_information:
    def R_to_CBF(self) -> sqr: ...
    def __init__(
        self,
        detector_origin: rec,
        detector_fast: rec,
        detector_slow: rec,
        detector_size_fast_slow: tuple[int, int],
        detector_pixel_size_fast_slow: tuple[float, float],
        rotation_axis: rec,
        sample_to_source: rec,
        wavelength: float,
        real_space_a: rec | None = ...,
        real_space_b: rec | None = ...,
        real_space_c: rec | None = ...,
        space_group_number: int | None = ...,
        sigma_divergence: Any | None = ...,
        mosaicity: Any | None = ...,
        starting_angle: float | None = ...,
        oscillation_range: float | None = ...,
        starting_frame: int | None = ...,
        original_rotation: sqr | None = ...,
        data_range: Any | None = ...,
        panel_offset: Any | None = ...,
        panel_size: Any | None = ...,
        panel_origin: Any | None = ...,
        panel_fast: Any | None = ...,
        panel_slow: Any | None = ...,
    ) -> None: ...
    def get(self, parameter_name: str) -> Any: ...
    def get_detector_origin(self): ...
    def get_detector_fast(self): ...
    def get_detector_slow(self): ...
    def get_rotation_axis(self): ...
    def get_sample_to_source(self): ...
    def get_wavelength(self): ...
    def get_real_space_a(self): ...
    def get_real_space_b(self): ...
    def get_real_space_c(self): ...
    def get_space_group_number(self): ...
    def get_original_rotation(self): ...
    def R_to_Rossmann(self): ...
    def R_to_Mosflm(self): ...
